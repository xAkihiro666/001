"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Playlist = void 0;
const axios_1 = __importDefault(require("axios"));
const Regexes = __importStar(require("../util/Regexes"));
const noop_1 = require("../util/noop");
const Util_1 = require("../util/Util");
const TypeError_1 = require("./TypeError");
const constants_1 = require("../util/constants");
class Playlist {
    constructor(listId) {
        this.tracks = [];
        this.totalPageCount = 0;
        this.listId = listId;
    }
    get title() {
        var _a;
        return (_a = this.data) === null || _a === void 0 ? void 0 : _a.name;
    }
    allLoaded() {
        return Boolean(this.token);
    }
    get description() {
        var _a;
        return (_a = this.data) === null || _a === void 0 ? void 0 : _a.description;
    }
    async fetch() {
        if (!this.tracks.length)
            await this.fetchFirstPage();
        if (!this.token)
            return this;
        if (!this.token || !this.apiKey) {
            await this.fetchFirstPage();
            if (!this.token) {
                throw new TypeError_1.TypeError(constants_1.ErrorCodes.UNKNOWN_TOKEN);
            }
            else {
                throw new TypeError_1.TypeError(constants_1.ErrorCodes.API_KEY_FAILED);
            }
        }
        const request = await axios_1.default.post(`${Util_1.Util.getYTApiBaseURL()}/browse?key=${this.apiKey}`, {
            context: this.context,
            continuation: this.token
        });
        const json = request.data;
        const tracks = json.onResponseReceivedActions[0].appendContinuationItemsAction.continuationItems;
        const hasAnotherPage = Boolean(tracks[tracks.length - 1].continuationItemRenderer);
        if (hasAnotherPage) {
            const renderer = tracks.pop();
            this.token = renderer.continuationItemRenderer.continuationEndpoint.continuationCommand.token;
            if (!this.token) {
                throw new TypeError_1.TypeError(constants_1.ErrorCodes.UNKNOWN_TOKEN);
            }
            this.addTracks(tracks);
            return await this.fetch();
        }
        else {
            delete this.token;
            this.addTracks(tracks);
        }
        return this;
    }
    get url() {
        return `${Util_1.Util.getYTPlaylistURL()}?list=${this.listId}`;
    }
    async fetchFirstPage() {
        var _a;
        if (this.tracks.length > 99)
            return this.tracks.slice(0, 100);
        const request = await axios_1.default.get(`${Util_1.Util.getYTPlaylistURL()}?list=${this.listId}&hl=en`).catch(noop_1.noop);
        if (!request) {
            throw new TypeError_1.TypeError(constants_1.ErrorCodes.PLAYLIST_LOAD_FAILED);
        }
        const res = Util_1.Util.getBetween(request.data, "var ytInitialData = ", ";</script>");
        if (!res) {
            throw new TypeError_1.TypeError(constants_1.ErrorCodes.PLAYLIST_LOAD_FAILED);
        }
        const json = JSON.parse(res);
        const apiKey = (_a = Regexes.YOUTUBE_API_KEY.exec(request.data)) === null || _a === void 0 ? void 0 : _a[2];
        const version = Util_1.Util.getBetween(request.data, '"INNERTUBE_CONTEXT_CLIENT_VERSION":"', '"');
        if (!version || !apiKey) {
            if (!version) {
                throw new TypeError_1.TypeError(constants_1.ErrorCodes.CLIENT_VERSION_FAILED);
            }
            else {
                throw new TypeError_1.TypeError(constants_1.ErrorCodes.API_KEY_FAILED);
            }
        }
        const metadata = json.metadata.playlistMetadataRenderer;
        this.data = {
            name: metadata.title,
            description: metadata.description
        };
        const tracks = json.contents.twoColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer.contents;
        const hasAnotherPage = Boolean(tracks[tracks.length - 1].continuationItemRenderer);
        if (hasAnotherPage) {
            const renderer = tracks.pop();
            this.token = renderer.continuationItemRenderer.continuationEndpoint.continuationCommand.token;
            if (!this.token) {
                throw new TypeError_1.TypeError(constants_1.ErrorCodes.UNKNOWN_TOKEN);
            }
        }
        this.clientVersion = version;
        this.apiKey = apiKey;
        this.addTracks(tracks);
        return this.tracks.slice(0, 100);
    }
    get context() {
        const context = { ...constants_1.DEFAULT_CONTEXT };
        if (this.clientVersion) {
            context.client.clientVersion = this.clientVersion;
        }
        return context;
    }
    addTracks(tracks) {
        var _a, _b, _c, _d, _e, _f, _g;
        for (const data of tracks) {
            const track = data.playlistVideoRenderer;
            if (!track) {
                continue;
            }
            this.tracks.push({
                url: `${Util_1.Util.getYTVideoURL()}${track.videoId}`,
                id: track.videoId,
                index: Number((_a = track.index) === null || _a === void 0 ? void 0 : _a.simpleText),
                formattedDuration: (_b = track.lengthText) === null || _b === void 0 ? void 0 : _b.simpleText,
                formattedReadableDuration: (_c = track.lengthText) === null || _c === void 0 ? void 0 : _c.accessibility.accessibilityData.label,
                duration: Number(track.lengthSeconds) * 1000,
                isPlayable: track.isPlayable,
                thumbnails: (_e = (_d = track.thumbnail) === null || _d === void 0 ? void 0 : _d.thumbnails) !== null && _e !== void 0 ? _e : [],
                title: (_g = (_f = track.title) === null || _f === void 0 ? void 0 : _f.runs) === null || _g === void 0 ? void 0 : _g[0].text
            });
        }
        this.totalPageCount++;
        return this;
    }
}
exports.Playlist = Playlist;
