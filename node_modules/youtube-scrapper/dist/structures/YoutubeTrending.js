"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YoutubeTrending = void 0;
const Util_1 = require("../util/Util");
class YoutubeTrending {
    constructor(json) {
        this.json = json;
    }
    get videos() {
        var _a, _b;
        const arr = [];
        for (const data of this.json) {
            if (!data.videoRenderer) {
                continue;
            }
            const video = data.videoRenderer;
            arr.push({
                url: `${Util_1.Util.getYTVideoURL()}${video.videoId}`,
                id: video.videoId,
                thumbnails: video.thumbnail.thumbnails,
                title: video.title.runs[0].text,
                author: {
                    name: video.ownerText.runs[0].text,
                    id: video.ownerText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url.split("/").slice(-1)[0],
                    thumbnails: video.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail.thumbnails
                },
                viewCount: Number(video.viewCountText.simpleText.split(" ")[0].replace(/,/g, "")),
                publishedTimeAgo: (_a = video.publishedTimeText) === null || _a === void 0 ? void 0 : _a.simpleText,
                formattedDuration: video.lengthText.simpleText,
                formattedReadableDuration: video.lengthText.accessibility.accessibilityData.label,
                formattedViewCount: video.shortViewCountText.simpleText,
                description: (_b = video.detailedMetadataSnippets) === null || _b === void 0 ? void 0 : _b[0].snippetText.runs.map((e) => e.text).join(""),
                duration: (() => {
                    let n = 0;
                    let y = 0;
                    for (const pointer of video.lengthText.simpleText.split(":").reverse().map((d) => Number(d))) {
                        n += (pointer * (y === 0 ? 1000 : y === 1 ? 60000 : y === 2 ? 3600000 : y === 3 ? 86400000 : 0));
                        y++;
                    }
                    return n;
                })()
            });
        }
        return arr;
    }
}
exports.YoutubeTrending = YoutubeTrending;
