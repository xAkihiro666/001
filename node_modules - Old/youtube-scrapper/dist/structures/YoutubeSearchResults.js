"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _YoutubeSearchResults_instances, _YoutubeSearchResults_getVideos;
Object.defineProperty(exports, "__esModule", { value: true });
exports.YoutubeSearchResults = void 0;
const __1 = require("..");
class YoutubeSearchResults {
    constructor(json) {
        _YoutubeSearchResults_instances.add(this);
        this.json = json;
    }
    getEstimatedResults() {
        return Number(this.json.estimatedResults);
    }
    get videos() {
        return __classPrivateFieldGet(this, _YoutubeSearchResults_instances, "m", _YoutubeSearchResults_getVideos).call(this);
    }
    video(index) {
        var _a;
        return (_a = __classPrivateFieldGet(this, _YoutubeSearchResults_instances, "m", _YoutubeSearchResults_getVideos).call(this, 1, index).at(0)) !== null && _a !== void 0 ? _a : null;
    }
    videosFrom(index = 0, limit) {
        return limit === 1 ? this.video(index) : __classPrivateFieldGet(this, _YoutubeSearchResults_instances, "m", _YoutubeSearchResults_getVideos).call(this, limit, index);
    }
}
exports.YoutubeSearchResults = YoutubeSearchResults;
_YoutubeSearchResults_instances = new WeakSet(), _YoutubeSearchResults_getVideos = function _YoutubeSearchResults_getVideos(limit, start = 0) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    const arr = [];
    const videos = this.json.contents.twoColumnSearchResultsRenderer.primaryContents.sectionListRenderer.contents[0].itemSectionRenderer.contents;
    for (const data of (limit ? videos.slice(start, limit + start) : videos.slice(start))) {
        const video = data.videoRenderer;
        if (video) {
            const rawViewCount = (_c = (_b = (_a = video.viewCountText) === null || _a === void 0 ? void 0 : _a.simpleText) === null || _b === void 0 ? void 0 : _b.split(" ")[0]) !== null && _c !== void 0 ? _c : (_e = (_d = video.viewCountText) === null || _d === void 0 ? void 0 : _d.runs[0]) === null || _e === void 0 ? void 0 : _e.text;
            const formattedDuration = (_g = (_f = video.lengthText) === null || _f === void 0 ? void 0 : _f.simpleText) !== null && _g !== void 0 ? _g : "0";
            const formattedReadableDuration = (_k = (_j = (_h = video.lengthText) === null || _h === void 0 ? void 0 : _h.accessibility) === null || _j === void 0 ? void 0 : _j.accessibilityData.label) !== null && _k !== void 0 ? _k : "0";
            const formattedViewCount = (_m = (_l = video.shortViewCountText) === null || _l === void 0 ? void 0 : _l.simpleText) !== null && _m !== void 0 ? _m : (_p = (_o = video.shortViewCountText) === null || _o === void 0 ? void 0 : _o.runs[0]) === null || _p === void 0 ? void 0 : _p.text;
            arr.push({
                url: __1.Util.getYTVideoURL() + video.videoId,
                id: video.videoId,
                thumbnails: video.thumbnail.thumbnails,
                title: video.title.runs[0].text,
                author: {
                    name: video.ownerText.runs[0].text,
                    id: video.ownerText.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url.split("/").slice(-1)[0],
                    thumbnails: video.channelThumbnailSupportedRenderers.channelThumbnailWithLinkRenderer.thumbnail.thumbnails
                },
                viewCount: rawViewCount ? Number(rawViewCount.replace(/,/g, "")) : 0,
                publishedTimeAgo: (_q = video.publishedTimeText) === null || _q === void 0 ? void 0 : _q.simpleText,
                formattedDuration: formattedDuration,
                formattedReadableDuration: formattedReadableDuration,
                formattedViewCount: formattedViewCount,
                description: (_r = video.detailedMetadataSnippets) === null || _r === void 0 ? void 0 : _r[0].snippetText.runs.map((e) => e.text).join(""),
                duration: formattedDuration !== "0" ? (() => {
                    let n = 0;
                    let y = 0;
                    for (const pointer of video.lengthText.simpleText.split(":").reverse().map((d) => Number(d))) {
                        n += (pointer * (y === 0 ? 1000 : y === 1 ? 60000 : y === 2 ? 3600000 : y === 3 ? 86400000 : 0));
                        y++;
                    }
                    return n;
                })() : 0
            });
        }
    }
    return arr;
};
