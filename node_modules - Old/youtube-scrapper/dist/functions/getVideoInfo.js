"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVideoInfo = void 0;
const axios_1 = __importDefault(require("axios"));
const YoutubeVideo_1 = require("../structures/YoutubeVideo");
const Util_1 = require("../util/Util");
async function getVideoInfo(urlOrId, getPlaylistFormats = false) {
    var _a, _b, _c;
    const id = Util_1.Util.getId(urlOrId);
    const request = await axios_1.default.get(`${Util_1.Util.getYTVideoURL()}${id}&hl=en`);
    const json = JSON.parse(request.data.split("var ytInitialPlayerResponse = ")[1].split(";</script>")[0]);
    if (((_a = json.playabilityStatus) === null || _a === void 0 ? void 0 : _a.status) === "ERROR") {
        throw Error(json.playabilityStatus.reason);
    }
    const video = new YoutubeVideo_1.YoutubeVideo(json);
    video.getHtml5Player(request.data);
    const pending = [];
    pending.push(video.fetchTokens());
    const moreFormats = [];
    const dashMpdUrl = (_b = video['json'].streamingData) === null || _b === void 0 ? void 0 : _b.dashManifestUrl;
    const m3u8Url = (_c = video['json'].streamingData) === null || _c === void 0 ? void 0 : _c.hlsManifestUrl;
    if (getPlaylistFormats) {
        if (dashMpdUrl)
            pending.push(Util_1.Util.dashMpdFormat(dashMpdUrl));
        if (m3u8Url)
            pending.push(Util_1.Util.m3u8Format(m3u8Url));
    }
    const resolved = await Promise.all(pending);
    for (const moreFormat of resolved.slice(1))
        moreFormats.push(...moreFormat);
    video.moreFormats = moreFormats;
    return video;
}
exports.getVideoInfo = getVideoInfo;
